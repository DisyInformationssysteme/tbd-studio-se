<%@ jet
imports="
        java.util.Map
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser
        org.talend.designer.bigdata.di.components.thbase.THbaseConnection
        org.talend.designer.bigdata.di.components.thbase.THBaseConfiguration
        org.talend.designer.bigdata.di.components.thbase.THbaseOutput
        "
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
<%
    final THbaseConnection thbase = new THbaseConnection((CodeGeneratorArgument) argument);
    final THBaseConfiguration tHBaseConfiguration = new THBaseConfiguration();
    final String cid = thbase.getCid();
    final INode node = thbase.getNode();
    final THbaseOutput thbaseOutput = new THbaseOutput((CodeGeneratorArgument) argument);

    log4jFileUtil.componentStartInfo(thbase.getNode());

   if(!thbaseOutput.isUseExistingConnection()){
 %>
     <%@ include file="@{org.talend.designer.components.bigdata}/components/templates/HBase/CreateHBaseConnection.javajet"%>
 <% } else { %>
 org.apache.hadoop.hbase.client.Connection connection_<%=cid%> = (org.apache.hadoop.hbase.client.Connection) globalMap.get("connection_<%=thbaseOutput.getExistingConnection()%>");
 <% } %>

 resourceMap.put("connection_<%=cid%>", connection_<%=cid%>);

int nb_line_<%=cid%> = 0;

//set familyParametersList
java.util.List<java.util.Map<String, String>> familyParameters = new java.util.ArrayList();
java.util.Map map = new java.util.HashMap();
<%
for (Map map: thbaseOutput.getFamilyParameters()){
    for (Map.Entry<String, String> entry : (Iterable<Map.Entry<String, String>>) map.entrySet()) {
%>
        map.put("<%=entry.getKey()%>","<%=entry.getValue()%>");
<%
     } %>
     familyParameters.add(map);
<% }
%>
// table action
org.talend.bigdata.core.di.components.hbase.ImmutableTHbaseTable
.builder()
.connection(connection_<%=cid%>)
.isSpecifyNamespace(<%=thbaseOutput.isSpecifyNamespace()%>)
.namespaceName(<%=thbaseOutput.getNamespace()%>)
.tableName(<%=thbaseOutput.getTableName()%>)
.tableAction("<%=thbaseOutput.getTableAction()%>")
.addAllFamilyParameters(familyParameters)
.createTableFunction(((tableName, admin, family)->{
        <% if (thbaseOutput.isHBase2x()){ %>
            org.apache.hadoop.hbase.client.TableDescriptorBuilder tableDesBuilder =
                    org.apache.hadoop.hbase.client.TableDescriptorBuilder.newBuilder(tableName);
            tableDesBuilder.setColumnFamily(family);
            org.apache.hadoop.hbase.client.TableDescriptor tableDes = tableDesBuilder.build();
            admin.createTable(tableDes);
        <% } else { %>
            org.apache.hadoop.hbase.HTableDescriptor tableDes =
                    new org.apache.hadoop.hbase.HTableDescriptor(tableName);
            tableDes.addFamily(family);
            admin.createTable(tableDes);
        <% } %>

}))
.build()
.doTableAction();

