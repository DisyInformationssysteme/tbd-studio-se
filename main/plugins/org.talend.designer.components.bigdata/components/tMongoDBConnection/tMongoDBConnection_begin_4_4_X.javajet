<%@ jet 
    imports="
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser 
        org.talend.designer.codegen.config.CodeGeneratorArgument
        
        java.util.Map
        java.util.List
        java.util.Arrays
        java.util.Set
        java.util.HashMap
    " 
%>

    <%@ include file="../templates/MongoDB/ApplicationName.javajet"%>
    
    <%
    boolean use_connection_string = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_CONNECTION_STRING__"));
    String connection_string = ElementParameterParser.getValue(node, "__CONNECTION_STRING__");
    %>

    // Declarations
    com.mongodb.client.MongoClient mongo_<%=cid%>=null;
    com.mongodb.client.MongoDatabase db_<%=cid%>=null;
    List<com.mongodb.ServerAddress> addrs_<%=cid%> = new java.util.ArrayList<>();
    com.mongodb.MongoClientSettings.Builder clientSettingsBuilder_<%=cid%> = com.mongodb.MongoClientSettings.builder()
    <%if(use_connection_string) {%>
    .applyConnectionString(new com.mongodb.ConnectionString(<%=connection_string%>))
    <%}%>
    .applicationName(applicationName_<%=cid %>);
    
    <%
    List<String> intAttributes = Arrays.asList(
        "CONNECTIONS_PER_HOST","MIN_CONNECTIONS_PER_HOST","MAINTENANCE_FREQUENCY","MAINTENANCE_INITIAL_DELAY",
        "MAX_CONNECTION_IDLE_TIME","MAX_CONNECTION_LIFE_TIME","MAX_WAIT_TIME","LOCAL_THRESHOLD",
        "SERVER_SELECTION_TIMEOUT","HEARTBEAT_FREQUENCY","MIN_HEARTBEAT_FREQUENCY","SOCKET_CONNECT_TIMEOUT",
        "SOCKET_READ_TIMEOUT","RECEIVE_BUFFER_SIZE","SEND_BUFFER_SIZE"
    );

    List<String> booleanAttributes = Arrays.asList(
        "SSL_INVALID_HOSTNAME_ALLOWED"
    );

    List<Map<String,String>> additionalList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node,"__OPTIONAL_ATTRIBUTES__");
    Map<String,String> optionalConnectionAttributesMap = new HashMap<String,String>();
    for(Map<String,String> map : additionalList){
        String attributeName = map.get("OPTIONAL_ATTRIBUTES_NAME");
        String attributeValue = map.get("OPTIONAL_ATTRIBUTES_VALUE");
        boolean isIntType = intAttributes.contains(attributeName);
        boolean isBooleanType = booleanAttributes.contains(attributeName);
        if (isIntType || isBooleanType) {
            attributeValue = attributeValue.replaceAll("\"","");
        }
        optionalConnectionAttributesMap.put(attributeName, attributeValue);
    }

    %>

    <%if(applyOptionalAttributes) {
        Set<String> connectionAttributesKeySet = optionalConnectionAttributesMap.keySet();
        if(connectionAttributesKeySet.contains("CONNECTIONS_PER_HOST")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToConnectionPoolSettings(builder -> builder.maxSize(<%=optionalConnectionAttributesMap.get("CONNECTIONS_PER_HOST")%>));
            <%
        }
        if(connectionAttributesKeySet.contains("MIN_CONNECTIONS_PER_HOST")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToConnectionPoolSettings(builder -> builder.minSize(<%=optionalConnectionAttributesMap.get("MIN_CONNECTIONS_PER_HOST")%>));
            <%
        }
        if(connectionAttributesKeySet.contains("MAINTENANCE_FREQUENCY")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToConnectionPoolSettings(builder -> builder.maintenanceFrequency(<%=optionalConnectionAttributesMap.get("MAINTENANCE_FREQUENCY")%>L, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("MAINTENANCE_INITIAL_DELAY")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToConnectionPoolSettings(builder -> builder.maintenanceInitialDelay(<%=optionalConnectionAttributesMap.get("MAINTENANCE_INITIAL_DELAY")%>L, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("MAX_CONNECTION_IDLE_TIME")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToConnectionPoolSettings(builder -> builder.maxConnectionIdleTime(<%=optionalConnectionAttributesMap.get("MAX_CONNECTION_IDLE_TIME")%>L, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("MAX_CONNECTION_LIFE_TIME")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToConnectionPoolSettings(builder -> builder.maxConnectionLifeTime(<%=optionalConnectionAttributesMap.get("MAX_CONNECTION_LIFE_TIME")%>L, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("MAX_WAIT_TIME")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToConnectionPoolSettings(builder -> builder.maxWaitTime(<%=optionalConnectionAttributesMap.get("MAX_WAIT_TIME")%>L, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("LOCAL_THRESHOLD")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToClusterSettings(builder -> builder.localThreshold(<%=optionalConnectionAttributesMap.get("LOCAL_THRESHOLD")%>L, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("REQUIRED_REPLICA_SET_NAME")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToClusterSettings(builder -> builder.requiredReplicaSetName(<%=optionalConnectionAttributesMap.get("REQUIRED_REPLICA_SET_NAME")%>));
            <%
        }
        if(connectionAttributesKeySet.contains("SERVER_SELECTION_TIMEOUT")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToClusterSettings(builder -> builder.serverSelectionTimeout(<%=optionalConnectionAttributesMap.get("SERVER_SELECTION_TIMEOUT")%>L, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("HEARTBEAT_FREQUENCY")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToServerSettings(builder -> builder.heartbeatFrequency(<%=optionalConnectionAttributesMap.get("HEARTBEAT_FREQUENCY")%>L, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("MIN_HEARTBEAT_FREQUENCY")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToServerSettings(builder -> builder.minHeartbeatFrequency(<%=optionalConnectionAttributesMap.get("MIN_HEARTBEAT_FREQUENCY")%>L, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("SOCKET_CONNECT_TIMEOUT")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToSocketSettings(builder -> builder.connectTimeout(<%=optionalConnectionAttributesMap.get("SOCKET_CONNECT_TIMEOUT")%>, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("SOCKET_READ_TIMEOUT")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToSocketSettings(builder -> builder.readTimeout(<%=optionalConnectionAttributesMap.get("SOCKET_READ_TIMEOUT")%>, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("RECEIVE_BUFFER_SIZE")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToSocketSettings(builder -> builder.receiveBufferSize(<%=optionalConnectionAttributesMap.get("RECEIVE_BUFFER_SIZE")%>, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("SEND_BUFFER_SIZE")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToSocketSettings(builder -> builder.sendBufferSize(<%=optionalConnectionAttributesMap.get("SEND_BUFFER_SIZE")%>, java.util.concurrent.TimeUnit.MILLISECONDS));
            <%
        }
        if(connectionAttributesKeySet.contains("SSL_INVALID_HOSTNAME_ALLOWED")) {
            %>
            clientSettingsBuilder_<%=cid%>.applyToSslSettings(builder -> builder.invalidHostNameAllowed(<%=optionalConnectionAttributesMap.get("SSL_INVALID_HOSTNAME_ALLOWED")%>));
            <%
        }
    }%>

    <%@ include file="@{org.talend.designer.components.bigdata}/components/templates/MongoDB/GeneralMongoDBConnectionSettings_4_4_X.javajet"%>

    <%if (setReadPreference) {
        if (readPreference.equals("PRIMARY")) {%>
            clientSettingsBuilder_<%=cid%>.readPreference(com.mongodb.ReadPreference.primary());
            <%
        } else if (readPreference.equals("PRIMARY_PREFERRED")) {%>
            clientSettingsBuilder_<%=cid%>.readPreference(com.mongodb.ReadPreference.primaryPreferred());
            <%
        } else if (readPreference.equals("SECONDARY")) {%>
            clientSettingsBuilder_<%=cid%>.readPreference(com.mongodb.ReadPreference.secondary());
            <%
        } else if (readPreference.equals("SECONDARY_PREFERRED")) {%>
            clientSettingsBuilder_<%=cid%>.readPreference(com.mongodb.ReadPreference.secondaryPreferred());
            <%
        } else if (readPreference.equals("NEAREST")) {%>
            clientSettingsBuilder_<%=cid%>.readPreference(com.mongodb.ReadPreference.nearest());
            <%
        }
    }%>

    <%if(setWriteConcern) {%>
        clientSettingsBuilder_<%=cid%>.writeConcern(com.mongodb.WriteConcern.<%=writeConcern%>);
        <%
    }%>

    mongo_<%=cid%> = com.mongodb.client.MongoClients.create(clientSettingsBuilder_<%=cid%>.build());
    resourceMap.put("mongo_<%=cid%>", mongo_<%=cid%>);
    db_<%=cid%> = mongo_<%=cid%>.getDatabase(<%=dbname%>);

    <%if(isLog4jEnabled) {%>
        for (com.mongodb.connection.ServerDescription description : mongo_<%=cid%>.getClusterDescription().getServerDescriptions()) {
            log.info("<%=cid%> - Connecting to " + description.getAddress());
        }
        <%
    }%>

    globalMap.put("mongo_<%=cid%>", mongo_<%=cid%>);
    globalMap.put("db_<%=cid%>", db_<%=cid%>);

